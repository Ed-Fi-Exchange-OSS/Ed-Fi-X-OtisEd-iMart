/****** Object:  StoredProcedure [dbo].[sp_iMart_Transform_fct_School_Calendar_edfi]    Script Date: 4:40:40 PM ******/
CREATE procedure [dbo].[sp_iMart_Transform_fct_School_Calendar_edfi]
(
     @SAID varchar(30) = null,
     @Batch_Period_List varchar(max) = null
)
as

-- ============================================================================
-- Script UTC date: 2019-04-15 18:11:01
-- Description: Generated by OtisEd iMart Wizard Tool
-- Copyright: ©2019 Otis Educational Systems, Inc. All Rights Reserved
-- ============================================================================

-- Example:  exec [dbo].[sp_iMart_Transform_fct_School_Calendar_edfi] @SAID='all', @Batch_Period_List='all'
/* 
<StatusList>
  <Status Code = "A">Assigned Waiting for mapping</Status>
  <Status Code = "I">Ignore for this implementation</Status>
  <Status Code = "M">Mapped and waiting for Review</Status>
  <Status Code = "U">Reviewed and deemed unacceptable.Needs Remapping</Status>
  <Status Code = "H">On Hold for this iteration, non-blocking</Status>
  <Status Code = "C"> Completed</Status>
</StatusList>
*/

--parameter processing
declare @BPLxml xml = (select cast('<a>'+replace(@Batch_Period_List,',','</a><a>') + '</a>' as xml))
declare @BPLtable table(Batch_Period varchar(50), primary key (Batch_Period))
insert into @BPLtable(Batch_Period) 
select ltrim(rtrim(t.value('.','nvarchar(50)'))) as Batch_Period from @BPLxml.nodes('/a') as x(t) where len(@Batch_Period_List)>0

declare @SAIDxml xml = (select cast('<a>'+replace(@SAID,',','</a><a>') + '</a>' as xml))
declare @SAIDtable table(SAID nvarchar(30), Agency nvarchar(30), primary key (SAID))
insert into @SAIDtable(SAID) 
select ltrim(rtrim(t.value('.','nvarchar(30)'))) as SAID from @SAIDxml.nodes('/a') as x(t) where len(@SAID)>0
update @SAIDtable set Agency=case when patindex('%-%', said) > 1 then left(said, patindex('%-%', said)-1 ) else said end

--<MappingInfo Table="fct_School_Calendar"> 

--<MappingInfoCommon>

--</MappingInfoCommon>

select
     [Academic_Year_Name]=convert(Char(9),
    --<MappingInfoStatus Status="C" Column="Academic_Year_Name">
    convert(varchar,[CalendarDate_lkp].SchoolYear-1) + '-'+ convert(varchar,[CalendarDate_lkp].SchoolYear)
    --</MappingInfoStatus>
    )

    ,[District_Id]=convert(VarChar(16),
    --<MappingInfoStatus Status="C" Column="District_Id">
    [edfi].[School].LocalEducationAgencyId
    --</MappingInfoStatus>
    )

    ,[School_Id]=convert(VarChar(16),
    --<MappingInfoStatus Status="C" Column="School_Id">
    [edfi].[School].SchoolId
    --</MappingInfoStatus>
    )

    ,[Date_Of_Day]=convert(Date,
    --<MappingInfoStatus Status="C" Column="Date_Of_Day">
    [CalendarDate_lkp].Date
    --</MappingInfoStatus>
    )

    ,[Calendar_Track_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Calendar_Track_Cd">
    [CalendarDate_lkp].CalendarCode
    --</MappingInfoStatus>
    )

    ,[Calendar_Track_School_Id]=convert(VarChar(16),
    --<MappingInfoStatus Status="C" Column="Calendar_Track_School_Id">
    [CalendarDate_lkp].SchoolId
    --</MappingInfoStatus>
    )

    ,[Calendar_Day_Type_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Calendar_Day_Type_Cd">
    [CalendarDate_lkp].CalendarDayType
    --</MappingInfoStatus>
    )

    ,[Cycle_Day_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="H" Column="Cycle_Day_Cd">
    '--' -- Hold till Bell Schedules and Cycle Days (A day, B day) are implemented.
    --</MappingInfoStatus>
    )

    ,[Calendar_Date]=convert(Date,
    --<MappingInfoStatus Status="C" Column="Calendar_Date">
    [CalendarDate_lkp].Date
    --</MappingInfoStatus>
    )

    ,[School_Day_Num]=convert(Int,
    --<MappingInfoStatus Status="C" Column="School_Day_Num">
    [CalendarDate_lkp].SchoolDayNum
    --</MappingInfoStatus>
    )

    ,[Occurrence]=convert(SmallInt,
    --<MappingInfoStatus Status="C" Column="Occurrence">
    1
    --</MappingInfoStatus>
    )

    ,[Batch_Period]=convert(VarChar(50),
    --<MappingInfoStatus Status="C" Column="Batch_Period">
    [CalendarDate_lkp].SchoolYear
    --</MappingInfoStatus>
    )

    ,[SAID]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="SAID">
    [CalendarDate_lkp].SAID
    --</MappingInfoStatus>
    )

    ,[Date_Stamp]=convert(DateTime2,
    --<MappingInfoStatus Status="C" Column="Date_Stamp">
    [CalendarDate_lkp].LastModifiedDate
    --</MappingInfoStatus>
    )

    ,[SourceIdentifier]=convert(VarChar(50),
    --<MappingInfoStatus Status="C" Column="SourceIdentifier">
    [CalendarDate_lkp].Id
    --</MappingInfoStatus>
    )

  --<MappingInfoFrom> -- select top (10) *
  from (
	select cd.SAID, cd.SchoolId, cd.Date, cd.CalendarCode, cd.SchoolYear, cd.Id, cd.LastModifiedDate, 
		   SchoolDayNum=DENSE_RANK() over (partition by cd.SAID, cd.SchoolId, cd.CalendarCode, cd.SchoolYear order by cd.Date),
		   CalendarDayType=d.CodeValue,
		   DayTypeOrder=ROW_NUMBER() over (partition by cd.SAID, cd.SchoolId, cd.Date, cd.CalendarCode, cd.SchoolYear order by d.DescriptorId)
	  from [edfi].[CalendarDate] cd
	  join [edfi].[CalendarDateCalendarEvent] ce
		on cd.SchoolId=ce.SchoolId and cd.Date=ce.Date and cd.CalendarCode=ce.CalendarCode and cd.SchoolYear=ce.SchoolYear
	  join edfi.Descriptor d on d.DescriptorId=ce.CalendarEventDescriptorId
	   ) [CalendarDate_lkp] 
  join [edfi].[School] on [edfi].[School].SchoolId=[CalendarDate_lkp].SchoolId
   and [CalendarDate_lkp].DayTypeOrder=1
 where @Batch_Period_List='all' or [CalendarDate_lkp].SchoolYear in (select Batch_Period from @BPLtable)
   and (IsNull(@SAID,'all') in ('all','any') or [CalendarDate_lkp].SAID in (select SAID from @SAIDtable) )

  --</MappingInfoFrom>
--</MappingInfo>