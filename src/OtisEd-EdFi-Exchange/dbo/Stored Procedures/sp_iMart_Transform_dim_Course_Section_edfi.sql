/****** Object:  StoredProcedure [dbo].[sp_iMart_Transform_dim_Course_Section_edfi]    Script Date: 4:40:40 PM ******/
CREATE procedure [dbo].[sp_iMart_Transform_dim_Course_Section_edfi]
(
     @SAID varchar(30) = null,
     @Batch_Period_List varchar(max) = null
)
as

-- ============================================================================
-- Script UTC date: 2019-04-15 18:11:01
-- Description: Generated by OtisEd iMart Wizard Tool
-- Copyright: ©2019 Otis Educational Systems, Inc. All Rights Reserved
-- ============================================================================

-- Example:  exec [dbo].[sp_iMart_Transform_dim_Course_Section_edfi] @SAID='all', @Batch_Period_List='all'
/* 
<StatusList>
  <Status Code = "A">Assigned Waiting for mapping</Status>
  <Status Code = "I">Ignore for this implementation</Status>
  <Status Code = "M">Mapped and waiting for Review</Status>
  <Status Code = "U">Reviewed and deemed unacceptable.Needs Remapping</Status>
  <Status Code = "H">On Hold for this iteration, non-blocking</Status>
  <Status Code = "C"> Completed</Status>
</StatusList>
*/

--parameter processing
declare @BPLxml xml = (select cast('<a>'+replace(@Batch_Period_List,',','</a><a>') + '</a>' as xml))
declare @BPLtable table(Batch_Period varchar(50), primary key (Batch_Period))
insert into @BPLtable(Batch_Period) 
select ltrim(rtrim(t.value('.','nvarchar(50)'))) as Batch_Period from @BPLxml.nodes('/a') as x(t) where len(@Batch_Period_List)>0

declare @SAIDxml xml = (select cast('<a>'+replace(@SAID,',','</a><a>') + '</a>' as xml))
declare @SAIDtable table(SAID nvarchar(30), Agency nvarchar(30), primary key (SAID))
insert into @SAIDtable(SAID) 
select ltrim(rtrim(t.value('.','nvarchar(30)'))) as SAID from @SAIDxml.nodes('/a') as x(t) where len(@SAID)>0
update @SAIDtable set Agency=case when patindex('%-%', said) > 1 then left(said, patindex('%-%', said)-1 ) else said end

--<MappingInfo Table="dim_Course_Section"> 

--<MappingInfoCommon>

--</MappingInfoCommon>

select distinct
     [Course_School_Id]=convert(VarChar(16),
    --<MappingInfoStatus Status="C" Column="Course_School_Id">
    [edfi].[Section].SchoolId
    --</MappingInfoStatus>
    )

    ,[Course_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Course_Cd">
    [edfi].[CourseOffering].CourseCode
    --</MappingInfoStatus>
    )

    ,[Course_Section_Identifier]=convert(VarChar(50),
    --<MappingInfoStatus Status="C" Column="Course_Section_Identifier">
    [edfi].[Section].SectionIdentifier
    --</MappingInfoStatus>
    )

    ,[Course_Section_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="I" Column="Course_Section_Cd">
    '--' -- Use Course_Section_Identifier
    --</MappingInfoStatus>
    )

    ,[Course_School_Name]=convert(VarChar(60),
    --<MappingInfoStatus Status="C" Column="Course_School_Name">
    IsNull((
	select top (1) eo.NameOfInstitution
	  from [edfi].[EducationOrganization] eo
	 where eo.EducationOrganizationId=[edfi].[Section].LocationSchoolId
	 ),'')
    --</MappingInfoStatus>
    )

    ,[Course_Title]=convert(VarChar(60),
    --<MappingInfoStatus Status="C" Column="Course_Title">
     [edfi].[Course].CourseTitle
    --</MappingInfoStatus>
    )

    ,[Course_Desc]=convert(VarChar(254),
    --<MappingInfoStatus Status="C" Column="Course_Desc">
    [edfi].[Course].CourseDescription
    --</MappingInfoStatus>
    )

    ,[Course_Sort_Order]=convert(SmallInt,
    --<MappingInfoStatus Status="I" Column="Course_Sort_Order">
    0 -- Managed out of process.
    --</MappingInfoStatus>
    )

    ,[Course_State_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Course_State_Cd">
    IsNull((
	select top(1) x.IdentificationCode
	  from [edfi].[CourseIdentificationCode] x
	  join [edfi].[Descriptor] d 
		on d.DescriptorId=x.CourseIdentificationSystemDescriptorId  
	   and d.CodeValue='State course code'
	 where x.EducationOrganizationId=[edfi].[CourseOffering].EducationOrganizationId 
	   and x.CourseCode=[edfi].[CourseOffering].CourseCode 
	),'')
    --</MappingInfoStatus>
    )

    ,[Course_State_Title]=convert(VarChar(60),
    --<MappingInfoStatus Status="H" Column="Course_State_Title">
    '' -- Not found in EdFi. Consider CodeXRef.
    --</MappingInfoStatus>
    )

    ,[Course_State_Code_Desc]=convert(VarChar(254),
    --<MappingInfoStatus Status="H" Column="Course_State_Code_Desc">
    '' -- Not found in EdFi. Consider CodeXRef.
    --</MappingInfoStatus>
    )

    ,[Course_Department_Desc]=convert(VarChar(60),
    --<MappingInfoStatus Status="C" Column="Course_Department_Desc">
	-- Gets mapped to Subject
    IsNull((
	select top (1) d.Description
	  from [edfi].[Descriptor] d 
	 where d.DescriptorId=[edfi].[Course].AcademicSubjectDescriptorId
	),'')
    --</MappingInfoStatus>
    )

    ,[Course_Active_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Course_Active_Ind">
    'Y' -- We consider all Sections defined in [edfi].[Section] as Active
    --</MappingInfoStatus>
    )

    ,[Course_Level_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Course_Level_Cd">
    IsNull((
	select top(1) d.CodeValue 
	  from [edfi].[CourseLevelCharacteristic] x
	  join [edfi].[Descriptor] d 
		on d.DescriptorId=x.CourseLevelCharacteristicDescriptorId 
	 where x.EducationOrganizationId=[edfi].[CourseOffering].EducationOrganizationId 
	   and x.CourseCode=[edfi].[CourseOffering].CourseCode 
	),'')
    --</MappingInfoStatus>
    )

    ,[Course_Level_Sort_Order]=convert(SmallInt,
    --<MappingInfoStatus Status="I" Column="Course_Level_Sort_Order">
    0 -- Managed out of process.
    --</MappingInfoStatus>
    )

    ,[Advanced_Placement_Cd]=convert(VarChar(60),
    --<MappingInfoStatus Status="C" Column="Advanced_Placement_Cd">
    -- Indistinguishable from Course Level in EdFi
    IsNull((
	select top(1) d.CodeValue 
	  from [edfi].[CourseLevelCharacteristic] x
	  join [edfi].[Descriptor] d 
		on d.DescriptorId=x.CourseLevelCharacteristicDescriptorId 
	 where x.EducationOrganizationId=[edfi].[CourseOffering].EducationOrganizationId 
	   and x.CourseCode=[edfi].[CourseOffering].CourseCode 
	),'')
    --</MappingInfoStatus>
    )

    ,[Advanced_Placement_Desc]=convert(VarChar(254),
    --<MappingInfoStatus Status="C" Column="Advanced_Placement_Desc">
    -- Indistinguishable from Course Level in EdFi
    IsNull((
	select top(1) d.Description 
	  from [edfi].[CourseLevelCharacteristic] x
	  join [edfi].[Descriptor] d 
		on d.DescriptorId=x.CourseLevelCharacteristicDescriptorId 
	 where x.EducationOrganizationId=[edfi].[CourseOffering].EducationOrganizationId 
	   and x.CourseCode=[edfi].[CourseOffering].CourseCode 
	),'')
    --</MappingInfoStatus>
    )

    ,[Course_Credit_Value]=convert(Decimal(9,2),
    --<MappingInfoStatus Status="C" Column="Course_Credit_Value">
    [edfi].[Section].AvailableCredits
    --</MappingInfoStatus>
    )

    ,[SCED_Course_Cd]=convert(Char(5),
    --<MappingInfoStatus Status="C" Column="SCED_Course_Cd">
    IsNull((
	select top(1) x.IdentificationCode
	  from [edfi].[CourseIdentificationCode] x
	  join [edfi].[Descriptor] d 
		on d.DescriptorId=x.CourseIdentificationSystemDescriptorId  
	   and d.CodeValue='SCED course code'
	 where x.EducationOrganizationId=[edfi].[CourseOffering].EducationOrganizationId 
	   and x.CourseCode=[edfi].[CourseOffering].CourseCode 
	),'')
    --</MappingInfoStatus>
    )

    ,[SCED_Course_Subject_Cd]=convert(Char(2),
    --<MappingInfoStatus Status="C" Column="SCED_Course_Subject_Cd">
	-- Needs to be place in CodeXref or in EdFi
    IsNull((
	select top (1) case d.CodeValue
					when 'English Language Arts' then '01'
					when 'Mathematics' then '02'
					when 'Life and Physical Sciences' then '03'
					when 'Social Sciences and History' then '04'
					when 'Fine and Performing Arts' then '05'
					when 'Foreign Language and Literature' then '06'
					when 'Religious Education and Theology' then '07'
					when 'Physical, Health, and Safety Education' then '08'
					when 'Military Science' then '09'
					when 'Computer and Information Sciences' then '10'
					when 'Communications and Audio/Visual Technology' then '11'
					when 'Business and Marketing' then '12'
					when 'Manufacturing' then '13'
					when 'Health Care Sciences' then '14'
					when 'Public, Protective, and Government Service' then '15'
					when 'Hospitality and Tourism' then '16'
					when 'Architecture and Construction' then '17'
					when 'Agriculture, Food, and Natural Resources' then '18'
					when 'Human Services' then '19'
					when 'Transportation, Distribution and Logistics' then '20'
					when 'Engineering and Technology' then '21'
					when 'Miscellaneous' then '22'
					else '' end
	  from [edfi].[Descriptor] d 
	 where d.DescriptorId=[edfi].[Course].AcademicSubjectDescriptorId
	),'')
    --</MappingInfoStatus>
    )

    ,[SCED_Course_Sequence]=convert(VarChar(10),
    --<MappingInfoStatus Status="I" Column="SCED_Course_Sequence">
    '--' -- Not found in EdFi
    --</MappingInfoStatus>
    )

    ,[Classroom_Identifier]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Classroom_Identifier">
    [edfi].[Section].LocationClassroomIdentificationCode
    --</MappingInfoStatus>
    )

    ,[Delivery_Mode_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Delivery_Mode_Cd">
    IsNull((
	select top (1) d.CodeValue
	  from [edfi].[Descriptor] d 
	 where d.DescriptorId=[edfi].[Section].MediumOfInstructionDescriptorId
	),'')
    --</MappingInfoStatus>
    )

    ,[Delivery_Mode_Desc]=convert(VarChar(254),
    --<MappingInfoStatus Status="C" Column="Delivery_Mode_Desc">
    IsNull((
	select top (1) d.Description
	  from [edfi].[Descriptor] d 
	 where d.DescriptorId=[edfi].[Section].MediumOfInstructionDescriptorId
	),'')
    --</MappingInfoStatus>
    )

    ,[Primary_Teacher_Unique_Id]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Primary_Teacher_Unique_Id">
    IsNull((
	select top(1) s.StaffUniqueId
	  from [edfi].[StaffSectionAssociation] x
	  join [edfi].[Staff] s on s.StaffUSI=x.StaffUSI
	  join [edfi].[Descriptor] d on d.DescriptorId=x.ClassroomPositionDescriptorId
	   and d.CodeValue='Teacher of Record'
	  where x.SchoolId=[edfi].[Section].SchoolId
		and x.SchoolYear=[edfi].[Section].SchoolYear
		and x.SessionName=[edfi].[Section].SessionName
		and x.SectionIdentifier=[edfi].[Section].SectionIdentifier
	),'')
    --</MappingInfoStatus>
    )

    ,[Primary_Teacher_Full_Name]=convert(VarChar(254),
    --<MappingInfoStatus Status="C" Column="Primary_Teacher_Full_Name">
    IsNull((
	select top(1) s.LastSurname+', '+s.FirstName
	  from [edfi].[StaffSectionAssociation] x
	  join [edfi].[Staff] s on s.StaffUSI=x.StaffUSI
	  join [edfi].[Descriptor] d on d.DescriptorId=x.ClassroomPositionDescriptorId
	   and d.CodeValue='Teacher of Record'
	  where x.SchoolId=[edfi].[Section].SchoolId
		and x.SchoolYear=[edfi].[Section].SchoolYear
		and x.SessionName=[edfi].[Section].SessionName
		and x.SectionIdentifier=[edfi].[Section].SectionIdentifier
	),'')
    --</MappingInfoStatus>
    )

    ,[Batch_Period]=convert(VarChar(50),
    --<MappingInfoStatus Status="C" Column="Batch_Period">
    [edfi].[Section].[SchoolYear]
    --</MappingInfoStatus>
    )

    ,[SAID]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="SAID">
    [edfi].[Section].SAID
    --</MappingInfoStatus>
    )

    ,[Date_Stamp]=convert(DateTime2,
    --<MappingInfoStatus Status="C" Column="Date_Stamp">
    [edfi].[Section].LastModifiedDate
    --</MappingInfoStatus>
    )


  --<MappingInfoFrom>
  from [edfi].[Section]
  join [edfi].[CourseOffering]
	on [edfi].[CourseOffering].SchoolId=[edfi].[Section].SchoolId
   and [edfi].[CourseOffering].SchoolYear=[edfi].[Section].SchoolYear
   and [edfi].[CourseOffering].SessionName=[edfi].[Section].SessionName
   and [edfi].[CourseOffering].LocalCourseCode=[edfi].[Section].LocalCourseCode
  join [edfi].[Course]
    on [edfi].[Course].EducationOrganizationId=[edfi].[CourseOffering].EducationOrganizationId 
   and [edfi].[Course].CourseCode=[edfi].[CourseOffering].CourseCode 

 where @Batch_Period_List='all' or [edfi].[Section].[SchoolYear] in (select Batch_Period from @BPLtable)
   and (IsNull(@SAID,'all') in ('all','any') or [edfi].[Section].[SAID] in (select SAID from @SAIDtable) )
  --</MappingInfoFrom>
--</MappingInfo>