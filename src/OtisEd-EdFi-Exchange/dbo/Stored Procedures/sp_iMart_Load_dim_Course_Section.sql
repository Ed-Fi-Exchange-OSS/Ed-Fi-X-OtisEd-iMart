/****** Object:  StoredProcedure [dbo].[sp_iMart_Load_dim_Course_Section]    Script Date: 4:40:40 PM ******/
CREATE PROCEDURE [dbo].[sp_iMart_Load_dim_Course_Section]
AS

-- ============================================================================
-- Script UTC date: 2019-04-22 13:59:06
-- Description: Generated by OtisEd iMart Wizard Tool
-- Copyright: ©2019 Otis Educational Systems, Inc. All Rights Reserved
-- ============================================================================

-- Example: EXEC [dbo].[sp_iMart_Load_dim_Course_Section]

WITH StageData
AS (
SELECT
    -- Business Id (Concatenate Context and all Business Keys)
    -- Business Id deprecated

    -- Natural Key
    [HASH_KEY_BK]=CONVERT(Binary(16), HASHBYTES('MD5',
    IsNull(A.[Course_School_Id], '?') + CHAR(9)
    + IsNull(A.[Course_Cd], '?') + CHAR(9)
    + IsNull(A.[Course_Section_Identifier], '?') + CHAR(9)
    )), -- BK hash key

    -- Type 1 Field Hash
    [HASH_KEY_T1]=CONVERT(Binary(16), HASHBYTES('MD5',
    IsNull(A.[Course_Section_Cd], '?') + CHAR(9)
    + IsNull(A.[Course_School_Name], '?') + CHAR(9)
    + IsNull(A.[Course_Title], '?') + CHAR(9)
    + IsNull(A.[Course_Desc], '?') + CHAR(9)
    + IsNull(A.[Course_State_Cd], '?') + CHAR(9)
    + IsNull(A.[Course_State_Title], '?') + CHAR(9)
    + IsNull(A.[Course_State_Code_Desc], '?') + CHAR(9)
    + IsNull(A.[Course_Department_Desc], '?') + CHAR(9)
    + IsNull(A.[Course_Active_Ind], '?') + CHAR(9)
    + IsNull(A.[Course_Level_Cd], '?') + CHAR(9)
    + IsNull(A.[Advanced_Placement_Cd], '?') + CHAR(9)
    + IsNull(A.[Advanced_Placement_Desc], '?') + CHAR(9)
    + IsNull(CONVERT(VARCHAR, A.[Course_Credit_Value]), '?') + CHAR(9)
    + IsNull(A.[SCED_Course_Cd], '?') + CHAR(9)
    + IsNull(A.[SCED_Course_Subject_Cd], '?') + CHAR(9)
    + IsNull(A.[SCED_Course_Sequence], '?') + CHAR(9)
    + IsNull(A.[Classroom_Identifier], '?') + CHAR(9)
    + IsNull(A.[Delivery_Mode_Cd], '?') + CHAR(9)
    + IsNull(A.[Delivery_Mode_Desc], '?') + CHAR(9)
    + IsNull(A.[Primary_Teacher_Unique_Id], '?') + CHAR(9)
    + IsNull(A.[Primary_Teacher_Full_Name], '?') + CHAR(9)
    + IsNull(CONVERT(VARCHAR, T29.[Course_Key]), '?') + CHAR(9)
    )), -- T1 hash key

    -- Type 1 C (Track Changes with Sequence) Field Hash
    -- No T1C Fields Found

    -- Type 2 Field Hash
    -- No T2 Fields Found

    -- Type 12 (Update with T2 band) Field Hash
    -- No T12 Fields Found

    -- Foreign Key Columns
    [Course_Key]=T29.[Course_Key],

    -- All Conform Table Columns
    [Course_School_Id]=A.[Course_School_Id],
    [Course_Cd]=A.[Course_Cd],
    [Course_Section_Identifier]=A.[Course_Section_Identifier],
    [Course_Section_Cd]=A.[Course_Section_Cd],
    [Course_School_Name]=A.[Course_School_Name],
    [Course_Title]=A.[Course_Title],
    [Course_Desc]=A.[Course_Desc],
    [Course_Sort_Order]=A.[Course_Sort_Order],
    [Course_State_Cd]=A.[Course_State_Cd],
    [Course_State_Title]=A.[Course_State_Title],
    [Course_State_Code_Desc]=A.[Course_State_Code_Desc],
    [Course_Department_Desc]=A.[Course_Department_Desc],
    [Course_Active_Ind]=A.[Course_Active_Ind],
    [Course_Level_Cd]=A.[Course_Level_Cd],
    [Course_Level_Sort_Order]=A.[Course_Level_Sort_Order],
    [Advanced_Placement_Cd]=A.[Advanced_Placement_Cd],
    [Advanced_Placement_Desc]=A.[Advanced_Placement_Desc],
    [Course_Credit_Value]=A.[Course_Credit_Value],
    [SCED_Course_Cd]=A.[SCED_Course_Cd],
    [SCED_Course_Subject_Cd]=A.[SCED_Course_Subject_Cd],
    [SCED_Course_Sequence]=A.[SCED_Course_Sequence],
    [Classroom_Identifier]=A.[Classroom_Identifier],
    [Delivery_Mode_Cd]=A.[Delivery_Mode_Cd],
    [Delivery_Mode_Desc]=A.[Delivery_Mode_Desc],
    [Primary_Teacher_Unique_Id]=A.[Primary_Teacher_Unique_Id],
    [Primary_Teacher_Full_Name]=A.[Primary_Teacher_Full_Name],
    [Batch_Period]=A.[Batch_Period],
    [SAID]=A.[SAID],
    [Date_Stamp]=A.[Date_Stamp],

    OES_Litho=Row_Number() OVER (ORDER BY (SELECT 1))
FROM [conform].[dim_Course_Section] A (NOLOCK)
LEFT OUTER JOIN [tdw].[dim_Course] T29
     ON T29.[Course_Cd]=A.[Course_Cd]
),

DataMerge AS (
SELECT
    [MissingBusinessKey]=CASE WHEN sd.[Course_School_Id] IS NULL OR sd.[Course_Cd] IS NULL OR sd.[Course_Section_Identifier] IS NULL THEN 1 ELSE 0 END,
    [MissingForeignKey]=CASE WHEN sd.[Course_Key] IS NULL THEN 1 ELSE 0 END,
    [DupCount]=Row_Number() OVER(partition BY sd.[Course_School_Id], sd.[Course_Cd], sd.[Course_Section_Identifier] ORDER BY sd.[Date_Stamp] DESC),
    [Course_Section_Key_Temp]=k1.[Course_Section_Key],
    [UpdateFlag]=CASE WHEN sd.[Hash_Key_T1] != k1.[Hash_Key_T1] THEN 1 ELSE 0 END,
    [NewSeqFlag]=0,
    [NewKeyFlag]=0,
    [NewRowFlag]=CASE WHEN k1.[Course_Section_Key] IS NULL THEN 1 ELSE 0 END,
    sd.*
FROM StageData sd
left outer join [tdw].[dim_Course_Section] K1
    on sd.[Hash_Key_BK] = K1.[Hash_Key_BK]

)

SELECT *,
    [Course_Section_Key]=dm.[Course_Section_Key_Temp],
    [DISCARDFLAG]=CASE WHEN [MissingForeignKey] = 1 OR [MissingBusinessKey] = 1 OR [DUPCOUNT] > 1 THEN 1 ELSE 0 END
FROM DataMerge dm
WHERE [NewRowFlag] = 1 --New Entity
   OR [NewKeyFlag] = 1 --New ADW Key (T2)
   OR [NewSeqFlag] = 1 --New Sequence (T1C)
   OR [UpdateFlag] = 1 --T1 Update
   OR [MissingBusinessKey] = 1 OR [DupCount] > 1 OR [MissingForeignKey] = 1 --Discard Record