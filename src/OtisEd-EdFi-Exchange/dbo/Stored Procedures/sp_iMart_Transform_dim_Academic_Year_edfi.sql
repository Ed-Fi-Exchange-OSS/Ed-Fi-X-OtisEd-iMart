/****** Object:  StoredProcedure [dbo].[sp_iMart_Transform_dim_Academic_Year_edfi]    Script Date: 4:40:40 PM ******/
CREATE procedure [dbo].[sp_iMart_Transform_dim_Academic_Year_edfi]
(
     @SAID varchar(30) = null,
     @Batch_Period_List varchar(max) = null
)
as

-- ============================================================================
-- Script UTC date: 2019-04-15 15:54:59
-- Description: Generated by OtisEd iMart Wizard Tool
-- Copyright: ©2019 Otis Educational Systems, Inc. All Rights Reserved
-- ============================================================================

-- Example:  exec [dbo].[sp_iMart_Transform_dim_Academic_Year_edfi] @SAID='all', @Batch_Period_List='all'
/* 
<StatusList>
  <Status Code = "A">Assigned Waiting for mapping</Status>
  <Status Code = "I">Ignore for this implementation</Status>
  <Status Code = "M">Mapped and waiting for Review</Status>
  <Status Code = "U">Reviewed and deemed unacceptable.Needs Remapping</Status>
  <Status Code = "H">On Hold for this iteration, non-blocking</Status>
  <Status Code = "C"> Completed</Status>
</StatusList>
*/

--parameter processing
declare @BPLxml xml = (select cast('<a>'+replace(@Batch_Period_List,',','</a><a>') + '</a>' as xml))
declare @BPLtable table(Batch_Period varchar(50), primary key (Batch_Period))
insert into @BPLtable(Batch_Period) 
select ltrim(rtrim(t.value('.','nvarchar(50)'))) as Batch_Period from @BPLxml.nodes('/a') as x(t) where len(@Batch_Period_List)>0

declare @SAIDxml xml = (select cast('<a>'+replace(@SAID,',','</a><a>') + '</a>' as xml))
declare @SAIDtable table(SAID nvarchar(30), Agency nvarchar(30), primary key (SAID))
insert into @SAIDtable(SAID) 
select ltrim(rtrim(t.value('.','nvarchar(30)'))) as SAID from @SAIDxml.nodes('/a') as x(t) where len(@SAID)>0
update @SAIDtable set Agency=case when patindex('%-%', said) > 1 then left(said, patindex('%-%', said)-1 ) else said end

--<MappingInfo Table="dim_Academic_Year"> 

--<MappingInfoCommon>

--</MappingInfoCommon>

select
     [Academic_Year_Name]=convert(Char(9),
    --<MappingInfoStatus Status="C" Column="Academic_Year_Name">
    convert(varchar,[edfi].[SchoolYearType].SchoolYear-1) + '-'+ convert(varchar,[edfi].[SchoolYearType].SchoolYear)
    --</MappingInfoStatus>
    )

    ,[Academic_Year_Short_Name]=convert(Char(5),
    --<MappingInfoStatus Status="C" Column="Academic_Year_Short_Name">
    right(convert(varchar,[edfi].[SchoolYearType].SchoolYear-1),2) + '-'+ right(convert(varchar,[edfi].[SchoolYearType].SchoolYear),2)
    --</MappingInfoStatus>
    )

    ,[Start_Year]=convert(Int,
    --<MappingInfoStatus Status="C" Column="Start_Year">
    [edfi].[SchoolYearType].SchoolYear-1
    --</MappingInfoStatus>
    )

    ,[End_Year]=convert(Int,
    --<MappingInfoStatus Status="C" Column="End_Year">
    [edfi].[SchoolYearType].SchoolYear
    --</MappingInfoStatus>
    )

    ,[Academic_Year_Nbr_Sequence]=convert(Int,
    --<MappingInfoStatus Status="C" Column="Academic_Year_Nbr_Sequence">
    [edfi].[SchoolYearType].SchoolYear-1990
    --</MappingInfoStatus>
    )

    ,[State_Funded_School_Days_In_Year]=convert(Int,
    --<MappingInfoStatus Status="I" Column="State_Funded_School_Days_In_Year">
    0 -- Managed out of Process.  Updated post load.
    --</MappingInfoStatus>
    )

    ,[Current_Academic_Year_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Current_Academic_Year_Ind">
    case when [edfi].[SchoolYearType].CurrentSchoolYear=1
		 then 'Y'
		 else 'N' end
    --</MappingInfoStatus>
    )

    ,[Batch_Period]=convert(VarChar(50),
    --<MappingInfoStatus Status="C" Column="Batch_Period">
    [edfi].[SchoolYearType].SchoolYear
    --</MappingInfoStatus>
    )

    ,[SAID]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="SAID">
    [edfi].[SchoolYearType].SAID
    --</MappingInfoStatus>
    )

    ,[Date_Stamp]=convert(DateTime2,
    --<MappingInfoStatus Status="C" Column="Date_Stamp">
    [edfi].[SchoolYearType].LastModifiedDate
    --</MappingInfoStatus>
    )

  --<MappingInfoFrom>
  from [edfi].[SchoolYearType]
 where (@Batch_Period_List='all' or [edfi].[SchoolYearType].SchoolYear in (select Batch_Period from @BPLtable))
   and (IsNull(@SAID,'all') in ('all','any') or[edfi].[SchoolYearType].SAID in (select SAID from @SAIDtable) )
  --</MappingInfoFrom>
--</MappingInfo>