/****** Object:  StoredProcedure [dbo].[sp_iMart_Transform_dim_Student_edfi]    Script Date: 4:40:40 PM ******/
CREATE procedure [dbo].[sp_iMart_Transform_dim_Student_edfi]
(
     @SAID varchar(30) = null,
     @Batch_Period_List varchar(max) = null
)
as

-- ============================================================================
-- Script UTC date: 2019-04-15 18:11:01
-- Description: Generated by OtisEd iMart Wizard Tool
-- Copyright: ©2019 Otis Educational Systems, Inc. All Rights Reserved
-- ============================================================================

-- Example:  exec [dbo].[sp_iMart_Transform_dim_Student_edfi] @SAID='all', @Batch_Period_List='all'
/* 
<StatusList>
  <Status Code = "A">Assigned Waiting for mapping</Status>
  <Status Code = "I">Ignore for this implementation</Status>
  <Status Code = "M">Mapped and waiting for Review</Status>
  <Status Code = "U">Reviewed and deemed unacceptable.Needs Remapping</Status>
  <Status Code = "H">On Hold for this iteration, non-blocking</Status>
  <Status Code = "C"> Completed</Status>
</StatusList>
*/

--parameter processing
declare @BPLxml xml = (select cast('<a>'+replace(@Batch_Period_List,',','</a><a>') + '</a>' as xml))
declare @BPLtable table(Batch_Period varchar(50), primary key (Batch_Period))
insert into @BPLtable(Batch_Period) 
select ltrim(rtrim(t.value('.','nvarchar(50)'))) as Batch_Period from @BPLxml.nodes('/a') as x(t) where len(@Batch_Period_List)>0

declare @SAIDxml xml = (select cast('<a>'+replace(@SAID,',','</a><a>') + '</a>' as xml))
declare @SAIDtable table(SAID nvarchar(30), Agency nvarchar(30), primary key (SAID))
insert into @SAIDtable(SAID) 
select ltrim(rtrim(t.value('.','nvarchar(30)'))) as SAID from @SAIDxml.nodes('/a') as x(t) where len(@SAID)>0
update @SAIDtable set Agency=case when patindex('%-%', said) > 1 then left(said, patindex('%-%', said)-1 ) else said end

--<MappingInfo Table="dim_Student"> 

--<MappingInfoCommon>
declare @ActiveSchoolYear smallint = (select top (1) SchoolYear from [edfi].[SchoolYearType] where CurrentSchoolYear=1)
declare @CalendarFirstLastDay table (SchoolYear smallint, SchoolId int, CalendarCode nvarchar(50), FirstDay date, LastDay date, primary key(SchoolYear, SchoolId, CalendarCode))
insert into @CalendarFirstLastDay (SchoolYear, SchoolId, CalendarCode, FirstDay, LastDay)
select ce.SchoolYear, ce.SchoolId, ce.CalendarCode, FirstDay=min(ce.Date), LastDay=max(ce.Date)
  from edfi.CalendarDateCalendarEvent ce
  join edfi.Descriptor d on d.DescriptorId=ce.CalendarEventDescriptorId
 where d.[Description]='Membership Day'
 group by ce.CalendarCode, ce.SchoolId, ce.SchoolYear
--</MappingInfoCommon>

select
     [Local_Student_Id]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="LOCAL_STUDENT_ID">
    IsNull((
	select top (1) ic.IdentificationCode -- select *
	  from [edfi].[StudentEducationOrganizationAssociationStudentIdentificationCode] ic
	  join [edfi].[Descriptor] d on d.DescriptorId=ic.StudentIdentificationSystemDescriptorId
	 where d.CodeValue='Local'
	   and ic.StudentUSI=[edfi].[Student].StudentUSI
	),'')
    --</MappingInfoStatus>
    )

    ,[Student_Unique_Id]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Student_Unique_Id">
    ltrim(rtrim([edfi].[Student].StudentUniqueId))
    --</MappingInfoStatus>
    )

    ,[Student_State_Id_Nbr]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Student_State_Id_Nbr">
    IsNull((
	select top(1) ic.IdentificationCode -- select *
	  from [edfi].[StudentEducationOrganizationAssociationStudentIdentificationCode] ic
	  join [edfi].[Descriptor] d on d.DescriptorId=ic.StudentIdentificationSystemDescriptorId
	 where d.CodeValue='State'
	),'')
    --</MappingInfoStatus>
    )

    ,[Student_Current_Enrolled_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Student_Current_Enrolled_Ind">
    case 
	when [StudentSchoolAssociation_MostRecent].ExitWithdrawDate is null 
	  or [StudentSchoolAssociation_MostRecent].ExitWithdrawDate >= (
				select top 1 LastDay from @CalendarFirstLastDay ld 
				 where ld.SchoolYear=[StudentSchoolAssociation_MostRecent].SchoolYear
				   and ld.SchoolId=[StudentSchoolAssociation_MostRecent].SchoolId
				   and ld.CalendarCode=[StudentSchoolAssociation_MostRecent].CalendarCode)
	then 'Y' 
	else 'N' end
    --</MappingInfoStatus>
    )

    ,[Student_First_Name]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Student_First_Name">
    [edfi].[Student].FirstName
    --</MappingInfoStatus>
    )

    ,[Student_Middle_Name]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Student_Middle_Name">
    IsNull([edfi].[Student].MiddleName,'')
    --</MappingInfoStatus>
    )

    ,[Student_Last_Name]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Student_Last_Name">
    [edfi].[Student].LastSurname
    --</MappingInfoStatus>
    )

    ,[Student_Name_Suffix]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Student_Name_Suffix">
    IsNull([edfi].[Student].GenerationCodeSuffix,'')
    --</MappingInfoStatus>
    )

    ,[Student_Full_Name]=convert(VarChar(254),
    --<MappingInfoStatus Status="C" Column="Student_Full_Name">
    IsNull([edfi].[Student].FirstName+' ','') + 
	IsNull([edfi].[Student].MiddleName+' ','') + 
	IsNull([edfi].[Student].LastSurname,'') + 
	IsNull(' '+[edfi].[Student].GenerationCodeSuffix,'')
    --</MappingInfoStatus>
    )

    ,[Student_Preferred_Name]=convert(VarChar(254),
    --<MappingInfoStatus Status="C" Column="Student_Preferred_Name">
    IsNull((select FirstName 
			  from [edfi].[StudentOtherName] x 
			  join [edFi].[Descriptor] d on d.DescriptorId=x.OtherNameTypeDescriptorId 
			 where x.StudentUSI=[edfi].[Student].StudentUSI and d.CodeValue='Nickname'),'')
    --</MappingInfoStatus>
    )

    ,[Student_Sort_Name]=convert(VarChar(254),
    --<MappingInfoStatus Status="C" Column="Student_Sort_Name">
	IsNull([edfi].[Student].LastSurname,'') + 
	IsNull(' '+[edfi].[Student].GenerationCodeSuffix,'')+','+
    IsNull(' '+[edfi].[Student].FirstName,'') + 
	IsNull(' '+[edfi].[Student].MiddleName,'')
    --</MappingInfoStatus>
    )

    ,[Student_SSN]=convert(VarChar(11),
    --<MappingInfoStatus Status="C" Column="Student_SSN">
    IsNull((
	select top (1) IdentificationCode
      from edfi.[StudentEducationOrganizationAssociationStudentIdentificationCode] x 
      join edFi.Descriptor d on d.DescriptorId=x.StudentIdentificationSystemDescriptorId 
     where x.StudentUSI=[edfi].[Student].StudentUSI and d.CodeValue='SSN'
	),'--') 
    --</MappingInfoStatus>
    )

    ,[Student_Birth_Date]=convert(Date,
    --<MappingInfoStatus Status="C" Column="Student_Birth_Date">
    IsNull([edfi].[Student].BirthDate,'1753-01-01')
    --</MappingInfoStatus>
    )

    ,[Student_Birth_Year_Month]=convert(Char(7),
    --<MappingInfoStatus Status="C" Column="Student_Birth_Year_Month">
    convert(char(4),datepart(year,IsNull([edfi].[Student].BirthDate,'1753-01-01')))
	+'-'
	+right('00'+convert(varchar,datepart(month,IsNull([edfi].[Student].BirthDate,'1753-01-01'))),2)
    --</MappingInfoStatus>
    )

    ,[Student_Birth_Year]=convert(Char(4),
    --<MappingInfoStatus Status="C" Column="Student_Birth_Year">
    datepart(year,IsNull([edfi].[Student].BirthDate,'1753-01-01'))
    --</MappingInfoStatus>
    )

    ,[Student_Birth_Country_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Student_Birth_Country_Cd">
    IsNull((
	select top (1) d.[CodeValue]
      from edFi.Descriptor d 
	 where d.DescriptorId=[edfi].[Student].BirthCountryDescriptorId
	),'--')
    --</MappingInfoStatus>
    )

    ,[Student_Birth_Country_Name]=convert(VarChar(254),
    --<MappingInfoStatus Status="C" Column="Student_Birth_Country_Name">
    IsNull((
	select top (1) d.[Description]
      from edFi.Descriptor d 
	 where d.DescriptorId=[edfi].[Student].BirthCountryDescriptorId
	),'--')
    --</MappingInfoStatus>
    )

    ,[Student_Gender_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Student_Gender_Cd">
    IsNull((
	select top (1) d.CodeValue
      from [edFi].[Descriptor] d 
	 where d.DescriptorId=[edfi].[StudentEducationOrganizationAssociation].SexDescriptorId 
	),'--')
    --</MappingInfoStatus>
    )

    ,[Student_Gender_Desc]=convert(VarChar(254),
    --<MappingInfoStatus Status="C" Column="Student_Gender_Desc">
    IsNull((
	select top (1) d.[Description]
      from [edFi].[Descriptor] d 
	 where d.DescriptorId=[edfi].[StudentEducationOrganizationAssociation].SexDescriptorId 
	),'--')
    --</MappingInfoStatus>
    )

    ,[Student_Gender_Sort_Order]=convert(SmallInt,
    --<MappingInfoStatus Status="C" Column="Student_Gender_Sort_Order">
    IsNull((
	select top (1) coalesce(x.XrefSortOrder,d.DescriptorId-(select min(SexDescriptorId) from [edfi].[SexDescriptor]))
      from [edFi].[Descriptor] d 
	  left outer
	  join CodeXref x on x.CodeCategory='Gender - Local to State' and x.LocalCode=d.CodeValue
	 where d.DescriptorId=[edfi].[StudentEducationOrganizationAssociation].SexDescriptorId 
	),0)
    --</MappingInfoStatus>
    )

    ,[American_Indian_Or_Alaska_Native_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="American_Indian_Or_Alaska_Native_Ind">
	case 
	when exists (
		select *
		  from edfi.[StudentEducationOrganizationAssociationRace] x 
		  join edFi.Descriptor d on d.DescriptorId=x.RaceDescriptorId and d.Namespace='uri://ed-fi.org/RaceDescriptor'
		 where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI 
		   and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId 
		   and d.CodeValue='American Indian - Alaska Native' )
		 then 'Y'
	else 'N' end
    --</MappingInfoStatus>
    )

    ,[Asian_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Asian_Ind">
	case 
	when exists (
		select *
		  from edfi.[StudentEducationOrganizationAssociationRace] x 
		  join edFi.Descriptor d on d.DescriptorId=x.RaceDescriptorId and d.Namespace='uri://ed-fi.org/RaceDescriptor'
		 where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI 
		   and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId 
		   and d.CodeValue='Asian' )
		 then 'Y'
	else 'N' end
    --</MappingInfoStatus>
    )

    ,[Black_Or_African_American_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Black_Or_African_American_Ind">
	case 
	when exists (
		select *
		  from edfi.[StudentEducationOrganizationAssociationRace] x 
		  join edFi.Descriptor d on d.DescriptorId=x.RaceDescriptorId and d.Namespace='uri://ed-fi.org/RaceDescriptor'
		 where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI 
		   and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId 
		   and d.CodeValue='Black - African American' )
		 then 'Y'
	else 'N' end
     --</MappingInfoStatus>
    )

    ,[Native_Hawaiian_Or_Other_Pacific_Islander_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Native_Hawaiian_Or_Other_Pacific_Islander_Ind">
	case 
	when exists (
		select *
		  from edfi.[StudentEducationOrganizationAssociationRace] x 
		  join edFi.Descriptor d on d.DescriptorId=x.RaceDescriptorId and d.Namespace='uri://ed-fi.org/RaceDescriptor'
		 where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI 
		   and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId 
		   and d.CodeValue='Native Hawaiian - Pacific Islander' )
		 then 'Y'
	else 'N' end
    --</MappingInfoStatus>
    )

    ,[White_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="White_Ind">
	case 
	when exists (
		select *
		  from edfi.[StudentEducationOrganizationAssociationRace] x 
		  join edFi.Descriptor d on d.DescriptorId=x.RaceDescriptorId and d.Namespace='uri://ed-fi.org/RaceDescriptor'
		 where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI 
		   and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId 
		   and d.CodeValue='White' )
		 then 'Y'
	else 'N' end
    --</MappingInfoStatus>
    )

    ,[Hispanic_Latino_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Hispanic_Latino_Ind">
	case 
	when exists (
		select *
		  from edfi.[StudentEducationOrganizationAssociation] x 
		 where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI 
		   and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId 
		   and x.HispanicLatinoEthnicity=1 )
		 then 'Y'
	else 'N' end
    --</MappingInfoStatus>
    )

    ,[Hispanic_Latino_Desc]=convert(VarChar(64),
    --<MappingInfoStatus Status="C" Column="Hispanic_Latino_Desc">
	case 
	when exists (
		select *
		  from edfi.[StudentEducationOrganizationAssociation] x 
		 where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI 
		   and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId 
		   and x.HispanicLatinoEthnicity=1 )
		 then 'Hispanic/Latino'
	else 'Not Hispanic/Latino' end
    --</MappingInfoStatus>
    )

    ,[Race_Desc]=convert(VarChar(132),
    --<MappingInfoStatus Status="C" Column="RACE_DESC">
    IsNull((select top (1) d.[Description]
                   from [edfi].[StudentEducationOrganizationAssociationRace] x 
                   join [edfi].[Descriptor] d on d.DescriptorId=x.RaceDescriptorId
                  where x.StudentUSI=edfi.student.StudentUSI),'--')
    --</MappingInfoStatus>
    )

    ,[Federal_Race_Ethnicity_Desc]=convert(VarChar(255),
    --<MappingInfoStatus Status="I" Column="Federal_Race_Ethnicity_Desc">
    '--'  -- Not found in EdFi
    --</MappingInfoStatus>
    )

    ,[Number_Of_Races_Reported]=convert(SmallInt,
    --<MappingInfoStatus Status="C" Column="Number_Of_Races_Reported">
    IsNull((
	select count(*)
	  from edfi.[StudentEducationOrganizationAssociationRace] x 
	  join edFi.Descriptor d on d.DescriptorId=x.RaceDescriptorId and d.Namespace='uri://ed-fi.org/RaceDescriptor'
	 where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI 
	   and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId 
	),0)
    --</MappingInfoStatus>
    )

    ,[Student_Immigrant_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Student_Immigrant_Ind">
	case when exists (
		select *
		  from [edfi].[StudentEducationOrganizationAssociationStudentCharacteristic] x
		  join [edfi].[Descriptor] d on d.DescriptorId=x.StudentCharacteristicDescriptorId and d.CodeValue='Immigrant'
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId )
	   then 'Y' else 'N' end
    --</MappingInfoStatus>
    )

    ,[Student_Migrant_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Student_Migrant_Ind">
	case when exists (
		select *
		  from [edfi].[StudentEducationOrganizationAssociationStudentCharacteristic] x
		  join [edfi].[Descriptor] d on d.DescriptorId=x.StudentCharacteristicDescriptorId and d.CodeValue='Migrant'
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId )
	   then 'Y' else 'N' end
    --</MappingInfoStatus>
    )

    ,[Student_Refugee_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Student_Refugee_Ind">
	case when exists (
		select *
		  from [edfi].[StudentEducationOrganizationAssociationStudentCharacteristic] x
		  join [edfi].[Descriptor] d on d.DescriptorId=x.StudentCharacteristicDescriptorId and d.CodeValue='Refugee'
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId )
	   then 'Y' else 'N' end
    --</MappingInfoStatus>
    )

    ,[Student_Current_LEP_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Student_Current_LEP_Ind">
	case 
	when exists (
		select *
		  from edfi.[StudentEducationOrganizationAssociation] x 
		  join [edfi].[Descriptor] d on d.DescriptorId=x.LimitedEnglishProficiencyDescriptorId
		   and d.CodeValue not in ('NotLimited')
		 where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI 
		   and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId )
		 then 'Y'
	else 'N' end
    --</MappingInfoStatus>
    )

    ,[Student_Current_Grade_Level_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Student_Current_Grade_Level_Cd">
    IsNull((
	select top (1) CodeValue from [edfi].[Descriptor] d where d.DescriptorId=[StudentSchoolAssociation_MostRecent].EntryGradeLevelDescriptorId
	),'--') 
    --</MappingInfoStatus>
    )

    ,[Student_Current_Grade_Level_Desc]=convert(VarChar(254),
    --<MappingInfoStatus Status="C" Column="Student_Current_Grade_Level_Desc">
    IsNull((
	select top (1) Description from [edfi].[Descriptor] d where d.DescriptorId=[StudentSchoolAssociation_MostRecent].EntryGradeLevelDescriptorId
	),'--') 
    --</MappingInfoStatus>
    )

    ,[Student_Current_Grade_Level_Sort_Order]=convert(SmallInt,
    --<MappingInfoStatus Status="C" Column="Student_Current_Grade_Level_Sort_Order">
    IsNull((
	select top (1) coalesce(x.LocalSortOrder,d.DescriptorId) 
	  from [edfi].[Descriptor] d 
	  left outer
	  join CodeXref x on x.CodeCategory='Grade Level - Local to State' and x.LocalCode=d.CodeValue
	 where d.DescriptorId=[StudentSchoolAssociation_MostRecent].EntryGradeLevelDescriptorId
	),0) 
    --</MappingInfoStatus>
    )

    ,[Student_Current_State_Grade_Level_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Student_Current_State_Grade_Level_Cd">
    IsNull((
	select top (1) x.XrefCode 
	  from [edfi].[Descriptor] d 
	  left outer
	  join CodeXref x on x.CodeCategory='Grade Level - Local to State' and x.LocalCode=d.CodeValue
	 where d.DescriptorId=[StudentSchoolAssociation_MostRecent].EntryGradeLevelDescriptorId
	),'') 
    --</MappingInfoStatus>
    )

    ,[Student_Current_State_Grade_Level_Desc]=convert(VarChar(254),
    --<MappingInfoStatus Status="C" Column="Student_Current_State_Grade_Level_Desc">
    IsNull((
	select top (1) x.XrefValue
	  from [edfi].[Descriptor] d 
	  left outer
	  join CodeXref x on x.CodeCategory='Grade Level - Local to State' and x.LocalCode=d.CodeValue
	 where d.DescriptorId=[StudentSchoolAssociation_MostRecent].EntryGradeLevelDescriptorId
	),'') 
    --</MappingInfoStatus>
    )

    ,[Student_Current_State_Grade_Level_Sort_Order]=convert(SmallInt,
    --<MappingInfoStatus Status="C" Column="Student_Current_State_Grade_Level_Sort_Order">
    IsNull((
	select top (1) x.XrefSortOrder 
	  from [edfi].[Descriptor] d 
	  left outer
	  join CodeXref x on x.CodeCategory='Grade Level - Local to State' and x.LocalCode=d.CodeValue
	 where d.DescriptorId=[StudentSchoolAssociation_MostRecent].EntryGradeLevelDescriptorId
	),'') 
    --</MappingInfoStatus>
    )

    ,[Student_Current_Economically_Disadvantaged_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Student_Current_Economically_Disadvantaged_Ind">
	case when exists (
		select *
		  from [edfi].[StudentEducationOrganizationAssociationStudentCharacteristic] x
		  join [edfi].[Descriptor] d on d.DescriptorId=x.StudentCharacteristicDescriptorId and d.CodeValue='Economic Disadvantaged'
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId )
	   then 'Y' else 'N' end
    --</MappingInfoStatus>
    )

    ,[Student_Current_Free_Reduced_Meal_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Student_Current_Free_Reduced_Meal_Cd">
	IsNull((
		select top (1) d.CodeValue
		  from [edfi].[StudentSchoolFoodServiceProgramAssociation] x
		  join [edfi].[Descriptor] d on d.DescriptorId=x.ProgramTypeDescriptorId 
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId 
	),'')
    --</MappingInfoStatus>
    )

    ,[Student_Current_Free_Reduced_Meal_Desc]=convert(VarChar(254),
    --<MappingInfoStatus Status="C" Column="Student_Current_Free_Reduced_Meal_Desc">
	IsNull((
		select top (1) d.Description
		  from [edfi].[StudentSchoolFoodServiceProgramAssociation] x
		  join [edfi].[Descriptor] d on d.DescriptorId=x.ProgramTypeDescriptorId 
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId 
	),'')
    --</MappingInfoStatus>
    )

    ,[Student_Current_Free_Reduced_Meal_Sort_Order]=convert(SmallInt,
    --<MappingInfoStatus Status="C" Column="Student_Current_Free_Reduced_Meal_Sort_Order">
	IsNull((
		select top (1) d.DescriptorId
		  from [edfi].[StudentSchoolFoodServiceProgramAssociation] x
		  join [edfi].[Descriptor] d on d.DescriptorId=x.ProgramTypeDescriptorId 
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId 
	),0)
    --</MappingInfoStatus>
    )

    ,[Student_Current_Disability_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Student_Current_Disability_Ind">
	case when exists (
		select *          
		from edfi.StudentSpecialEducationProgramAssociation pa
	   where pa.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and pa.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId
	     and IsNull([StudentSchoolAssociation_MostRecent].EntryDate,'1753-01-01') <= IsNull(pa.IEPEndDate,'9999-12-31') 
		 and IsNull(pa.IEPBeginDate,'1753-01-01') <= IsNull([StudentSchoolAssociation_MostRecent].ExitWithdrawDate,'9999-12-31') 
		 and (pa.IEPBeginDate is not null or pa.IEPEndDate is not null) )
	   then 'Y' else 'N' end
    --</MappingInfoStatus>
    )

    ,[Student_Date_Entered_District]=convert(Date,
    --<MappingInfoStatus Status="I" Column="Student_Date_Entered_District">
    '1753-01-01' -- Not found in EdFi
    --</MappingInfoStatus>
    )

    ,[Student_Date_Entered_USA_School]=convert(Date,
    --<MappingInfoStatus Status="I" Column="Student_Date_Entered_USA_School">
    '1753-01-01' -- Not found in EdFi
    --</MappingInfoStatus>
    )

    ,[Student_Resident_District]=convert(VarChar(30),
    --<MappingInfoStatus Status="I" Column="Student_Resident_District">
    '--'  -- Not found in EdFi
    --</MappingInfoStatus>
    )

    ,[Student_Citizenship_Country]=convert(VarChar(30),
    --<MappingInfoStatus Status="I" Column="Student_Citizenship_Country">
    '--'  -- Not found in EdFi
    --</MappingInfoStatus>
    )

    ,[Student_USA_Date_Of_Entry]=convert(Date,
    --<MappingInfoStatus Status="I" Column="Student_USA_Date_Of_Entry">
    '1753-01-01' -- Not found in EdFi
    --</MappingInfoStatus>
    )

    ,[Student_Primary_Language]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Student_Primary_Language">
    IsNull((
	select top (1) ld.Description
	  from [edfi].[StudentEducationOrganizationAssociationLanguageUse] x
	  join [edfi].[Descriptor] ld on ld.DescriptorId=x.LanguageDescriptorId 
	  join [edfi].[Descriptor] lud on lud.DescriptorId=x.LanguageUseDescriptorId
	 where x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId
	   and x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	 order by case lud.CodeValue when 'Dominant language' then 1
								 when 'Home language' then 2
								 when 'Native language' then 3
								 else 99 end
	),'')  
    --</MappingInfoStatus>
    )

    ,[Student_Year_Entered_9th_Grade]=convert(Char(4),
    --<MappingInfoStatus Status="I" Column="Student_Year_Entered_9th_Grade">
    '1753' -- Not found in EdFi
    --</MappingInfoStatus>
    )

    ,[Student_Graduation_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Student_Graduation_Ind">
	case when exists (
		select *          
		from [edfi].[StudentAcademicRecordDiploma] x
		join [edfi].[Descriptor] d on d.DescriptorId=x.DiplomaTypeDescriptorId
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId )
	   then 'Y' else 'N' end
    --</MappingInfoStatus>
    )

    ,[Student_Graduation_Date]=convert(Date,
    --<MappingInfoStatus Status="C" Column="Student_Graduation_Date">
    IsNull((
	select top (1) x.DiplomaAwardDate
	  from [edfi].[StudentAcademicRecordDiploma] x
	  join [edfi].[Descriptor] dt on dt.DescriptorId=x.DiplomaTypeDescriptorId 
	 where x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId
	   and x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	),'9999-12-31')  
    --</MappingInfoStatus>
    )

    ,[Student_Diploma_Type_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Student_Diploma_Type_Cd">
	IsNull((
	select top (1) dt.CodeValue
	  from [edfi].[StudentAcademicRecordDiploma] x
	  join [edfi].[Descriptor] dt on dt.DescriptorId=x.DiplomaTypeDescriptorId 
	 where x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId
	   and x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	),'--')
    --</MappingInfoStatus>
    )

    ,[Student_Received_Ged_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Student_Received_Ged_Ind">
	case when exists (
		select *          
		from [edfi].[StudentAcademicRecordDiploma] x
		join [edfi].[Descriptor] d on d.DescriptorId=x.DiplomaTypeDescriptorId
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId
	     and d.CodeValue in ('General Educational Development (GED) credential') )
	   then 'Y' else 'N' end
    --</MappingInfoStatus>
    )

    ,[Student_Current_Title_1_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Student_Current_Title_1_Cd">
	case when exists (
		select *
		  from [edfi].[StudentTitleIPartAProgramAssociation] x
		  join [edfi].[Descriptor] d on d.DescriptorId=x.TitleIPartAParticipantDescriptorId and d.CodeValue not in ('Was not served')
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId )
	   then 'Y' else 'N' end
    --</MappingInfoStatus>
    )

    ,[Student_Current_Homeless_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Student_Current_Homeless_Ind">
	case when exists (
		select *
		  from [edfi].[StudentEducationOrganizationAssociationStudentCharacteristic] x
		  join [edfi].[Descriptor] d on d.DescriptorId=x.StudentCharacteristicDescriptorId and d.CodeValue='Homeless'
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId )
	   then 'Y' else 'N' end
    --</MappingInfoStatus>
    )

    ,[Student_Homeless_Unaccompanied_Youth_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Student_Homeless_Unaccompanied_Youth_Ind">
	case when exists (
		select *
		  from [edfi].[StudentEducationOrganizationAssociationStudentCharacteristic] x
		  join [edfi].[Descriptor] d on d.DescriptorId=x.StudentCharacteristicDescriptorId and d.CodeValue='Unaccompanied Youth'
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId )
	   then 'Y' else 'N' end
    --</MappingInfoStatus>
    )

    ,[Student_Current_SpEd_Eligible_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Student_Current_SpEd_Eligible_Ind">
	case when exists (
		select *
		  from [edfi].[StudentSpecialEducationProgramAssociation] x
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId
		 and x.IEPBeginDate is not null )
	   then 'Y' else 'N' end
    --</MappingInfoStatus>
    )

    ,[Student_Current_SpEd_Receiving_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Student_Current_SpEd_Receiving_Ind">
	case when exists (
		select *
		  from [edfi].[StudentSpecialEducationProgramAssociationSpecialEducationProgramService] x
		  join [edfi].[Descriptor] d on d.DescriptorId=x.SpecialEducationProgramServiceDescriptorId
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId )
	   then 'Y' else 'N' end
    --</MappingInfoStatus>
    )

    ,[Student_SpEd_Area_of_Exceptionality]=convert(VarChar(50),
    --<MappingInfoStatus Status="C" Column="Student_SpEd_Area_of_Exceptionality">
    IsNull((
	select top (1) dc.CodeValue
	  from [edfi].[StudentSpecialEducationProgramAssociationDisability] x 
	  join [edfi].[Descriptor] dc on dc.DescriptorId=x.DisabilityDescriptorId
	 where x.OrderofDisability=1 
	   and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId 
	   and x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	),'--') 
    --</MappingInfoStatus>
    )

    ,[Student_State_Funding_Type]=convert(VarChar(254),
    --<MappingInfoStatus Status="I" Column="Student_State_Funding_Type">
    '--' -- Not found in EdFi
    --</MappingInfoStatus>
    )

    ,[Student_Current_Gifted_Ind]=convert(Char(1),
    --<MappingInfoStatus Status="C" Column="Student_Current_Gifted_Ind">
	case when exists (
		select *
		  from [edfi].[StudentProgramAssociation] x
		  join [edfi].[Descriptor] d on d.DescriptorId=x.ProgramTypeDescriptorId and d.CodeValue='Gifted and Talented'
	   where x.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	     and x.EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId )
	   then 'Y' else 'N' end
    --</MappingInfoStatus>
    )

    ,[Current_School_Id]=convert(VarChar(16),
    --<MappingInfoStatus Status="C" Column="Current_School_Id">
    IsNull((
	select top (1) SchoolId
	  from [edfi].[StudentSchoolAssociation] ssa
	 where ssa.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	 order by ssa.EntryDate desc
	),0)
    --</MappingInfoStatus>
    )

    ,[Current_School_Name]=convert(VarChar(60),
    --<MappingInfoStatus Status="C" Column="Current_School_Name">
    IsNull((
	select top (1) eo.NameOfInstitution
	  from [edfi].[StudentSchoolAssociation] ssa
	  join [edfi].[EducationOrganization] eo on eo.EducationOrganizationId=ssa.SchoolId
	 where ssa.StudentUSI=[StudentSchoolAssociation_MostRecent].StudentUSI
	 order by ssa.EntryDate desc
	),0)
    --</MappingInfoStatus>
    )

    ,[Batch_Period]=convert(VarChar(50),
    --<MappingInfoStatus Status="C" Column="Batch_Period">
    IsNull([StudentSchoolAssociation_MostRecent].SchoolYear,@ActiveSchoolYear)
    --</MappingInfoStatus>
    )

    ,[SAID]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="SAID">
    [edfi].[Student].SAID
    --</MappingInfoStatus>
    )

    ,[Date_Stamp]=convert(DateTime2,
    --<MappingInfoStatus Status="C" Column="Date_Stamp">
    convert(date,[StudentSchoolAssociation_MostRecent].LastModifiedDate)
    --</MappingInfoStatus>
    )

  --<MappingInfoFrom> -- select count(*) -- select top 10 *
  from [edfi].[Student] -- 21628
  join (
	  select EnrollOrderDesc=Row_Number() over (partition by SAID, STUDENTUSI order by EntryDate desc), *
	    from [edfi].[StudentSchoolAssociation]
	   ) [StudentSchoolAssociation_MostRecent]
		on [StudentSchoolAssociation_MostRecent].EnrollOrderDesc=1 
	   and [StudentSchoolAssociation_MostRecent].StudentUSI = [edfi].[Student].StudentUSI --21630
  join [edfi].[StudentEducationOrganizationAssociation] 
    on [edfi].[StudentEducationOrganizationAssociation].StudentUSI=[edfi].[Student].StudentUSI
   and [edfi].[StudentEducationOrganizationAssociation].EducationOrganizationId=[StudentSchoolAssociation_MostRecent].EducationOrganizationId -- 21630

 where (@Batch_Period_List='all' or IsNull([StudentSchoolAssociation_MostRecent].SchoolYear,@ActiveSchoolYear) in (select Batch_Period from @BPLtable))
   and (IsNull(@SAID,'all') in ('all','any') or [edfi].[Student].SAID in (select SAID from @SAIDtable) )
  --</MappingInfoFrom>
--</MappingInfo>