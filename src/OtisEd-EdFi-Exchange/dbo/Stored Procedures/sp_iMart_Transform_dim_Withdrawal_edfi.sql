/****** Object:  StoredProcedure [dbo].[sp_iMart_Transform_dim_Withdrawal_edfi]    Script Date: 4:40:40 PM ******/
CREATE procedure [dbo].[sp_iMart_Transform_dim_Withdrawal_edfi]
(
     @SAID varchar(30) = null,
     @Batch_Period_List varchar(max) = null
)
as

-- ============================================================================
-- Script UTC date: 2019-04-15 18:11:01
-- Description: Generated by OtisEd iMart Wizard Tool
-- Copyright: ©2019 Otis Educational Systems, Inc. All Rights Reserved
-- ============================================================================

-- Example:  exec [dbo].[sp_iMart_Transform_dim_Withdrawal_edfi] @SAID='all', @Batch_Period_List='all'
/* 
<StatusList>
  <Status Code = "A">Assigned Waiting for mapping</Status>
  <Status Code = "I">Ignore for this implementation</Status>
  <Status Code = "M">Mapped and waiting for Review</Status>
  <Status Code = "U">Reviewed and deemed unacceptable.Needs Remapping</Status>
  <Status Code = "H">On Hold for this iteration, non-blocking</Status>
  <Status Code = "C"> Completed</Status>
</StatusList>
*/

--parameter processing
declare @BPLxml xml = (select cast('<a>'+replace(@Batch_Period_List,',','</a><a>') + '</a>' as xml))
declare @BPLtable table(Batch_Period varchar(50), primary key (Batch_Period))
insert into @BPLtable(Batch_Period) 
select ltrim(rtrim(t.value('.','nvarchar(50)'))) as Batch_Period from @BPLxml.nodes('/a') as x(t) where len(@Batch_Period_List)>0

declare @SAIDxml xml = (select cast('<a>'+replace(@SAID,',','</a><a>') + '</a>' as xml))
declare @SAIDtable table(SAID nvarchar(30), Agency nvarchar(30), primary key (SAID))
insert into @SAIDtable(SAID) 
select ltrim(rtrim(t.value('.','nvarchar(30)'))) as SAID from @SAIDxml.nodes('/a') as x(t) where len(@SAID)>0
update @SAIDtable set Agency=case when patindex('%-%', said) > 1 then left(said, patindex('%-%', said)-1 ) else said end

--<MappingInfo Table="dim_Withdrawal"> 

--<MappingInfoCommon>
declare @ActiveSchoolYear smallint = (select top (1) SchoolYear from [edfi].[SchoolYearType] where CurrentSchoolYear=1)
--</MappingInfoCommon>

select
     [Withdrawal_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Withdrawal_Cd">
    [ExitWithdraw].ExitWithdrawCodeValue
    --</MappingInfoStatus>
    )

    ,[Withdrawal_Desc]=convert(VarChar(254),
    --<MappingInfoStatus Status="C" Column="Withdrawal_Desc">
    [ExitWithdraw].ExitWithdrawDesc
    --</MappingInfoStatus>
    )

    ,[Withdrawal_State_Cd]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="Withdrawal_State_Cd">
    IsNull((
	select top (1) XrefCode
	  from dbo.CodeXRef 
	 where CodeCategory='Exit Codes - Local to State' -- 
	   and LocalCode=[ExitWithdraw].ExitWithdrawCodeValue
	),[ExitWithdraw].ExitWithdrawCodeValue  -- Assumes if No Crosswalk from Local to State we will us local code.
	)
    --</MappingInfoStatus>
    )

    ,[Withdrawal_State_Desc]=convert(VarChar(254),
    --<MappingInfoStatus Status="C" Column="Withdrawal_State_Desc">
    IsNull((
	select top (1) XrefValue
	  from dbo.CodeXRef 
	 where CodeCategory='Entry Codes - Local to State' -- 
	   and LocalCode=[ExitWithdraw].ExitWithdrawCodeValue
	),[ExitWithdraw].ExitWithdrawDesc  -- Assumes if No Crosswalk from Local to State we will us local description.
	)
    --</MappingInfoStatus>
    )

    ,[Withdrawal_Sort_Order]=convert(SmallInt,
    --<MappingInfoStatus Status="C" Column="Withdrawal_Sort_Order">
    [ExitWithdraw].SortOrder
    --</MappingInfoStatus>
    )

    ,[Batch_Period]=convert(VarChar(50),
    --<MappingInfoStatus Status="C" Column="Batch_Period">
    coalesce([ExitWithdraw].SchoolYear,@ActiveSchoolYear)
    --</MappingInfoStatus>
    )

    ,[SAID]=convert(VarChar(30),
    --<MappingInfoStatus Status="C" Column="SAID">
    [ExitWithdraw].SAID
    --</MappingInfoStatus>
    )

    ,[Date_Stamp]=convert(DateTime2,
    --<MappingInfoStatus Status="C" Column="Date_Stamp">
    IsNull([ExitWithdraw].LastModifiedDate,getdate())
    --</MappingInfoStatus>
    )

  --<MappingInfoFrom> -- select count(*)  -- select top (10) * 
  from (
	select ExitWithdrawCodeValue=IsNull(d.CodeValue,'UNK'), 
		   ExitWithdrawDesc=IsNull(d.[Description],'Unknown'),
		   LastModifiedDate=max(d.LastModifiedDate), 
		   sa.SchoolYear, sa.SAID, 
		   SortOrder=IsNull(max(d.DescriptorId),-1)
	  from [edfi].[StudentSchoolAssociation]  sa
	  left join [edfi].[Descriptor] d on d.DescriptorId=sa.ExitWithdrawTypeDescriptorId
	 group by IsNull(d.CodeValue,'UNK'), IsNull(d.[Description],'Unknown'), sa.SchoolYear, sa.SAID
  ) [ExitWithdraw] 

 where (@Batch_Period_List='all' or IsNull([ExitWithdraw].SchoolYear,@ActiveSchoolYear) in (select Batch_Period from @BPLtable))
   and (IsNull(@SAID,'all') in ('all','any') or [ExitWithdraw].SAID in (select SAID from @SAIDtable) )
  --</MappingInfoFrom>
--</MappingInfo>